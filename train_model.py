# train_model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import r2_score
import joblib

# 1. ƒê·ªçc d·ªØ li·ªáu
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
data = pd.read_csv(url, sep=';')  # D·ªØ li·ªáu d√πng d·∫•u ch·∫•m ph·∫©y ';'

# 2. Chia d·ªØ li·ªáu th√†nh ƒë·∫ßu v√†o (X) v√† ƒë·∫ßu ra (y)
X = data.drop("quality", axis=1)
y = data["quality"]

# 3. T√°ch t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 4. Chu·∫©n h√≥a d·ªØ li·ªáu (gi√∫p MLP h·ªçc t·ªët h∆°n)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 5. Hu·∫•n luy·ªán m√¥ h√¨nh MLP (Multi-Layer Perceptron)
model = MLPRegressor(
    hidden_layer_sizes=(128, 64, 32),
    activation='relu',
    max_iter=1000,
    random_state=42
)
model.fit(X_train_scaled, y_train)

# 6. ƒê√°nh gi√° m√¥ h√¨nh
y_pred = model.predict(X_test_scaled)
score = r2_score(y_test, y_pred)
print(f"üéØ ƒê·ªô ch√≠nh x√°c R¬≤: {score:.3f}")

# 7. L∆∞u m√¥ h√¨nh v√† scaler
joblib.dump(model, "wine_mlp_model.pkl")
joblib.dump(scaler, "scaler.pkl")

print("‚úÖ ƒê√£ hu·∫•n luy·ªán v√† l∆∞u m√¥ h√¨nh th√†nh c√¥ng!")